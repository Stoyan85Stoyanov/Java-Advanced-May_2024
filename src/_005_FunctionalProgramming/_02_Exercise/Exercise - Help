
package _005_FunctionalProgramming._02_Exercise;

import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.function.Consumer;

public class _01_ConsumerPrint {
    public static void main(String[] args) {
        Scanner scanner = new Scanner (System.in);

        List<String> names = Arrays.stream(scanner.nextLine().split("\\s+")).toList();

        Consumer<String> consumer = name -> System.out.println(name);

        names.forEach(consumer);
    }
}
---------------------------------------------------------------------------------------------
package _005_FunctionalProgramming._02_Exercise;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.function.Function;

public class _03_CustomMinFunction {
    public static void main(String[] args) {
        Scanner scanner = new Scanner (System.in);

        List<Integer> numbers = Arrays.stream(scanner.nextLine().split("\\s+")).map(Integer::parseInt).toList();

        Function<List<Integer>, Integer> function = lastOfNumbers -> Collections.min(lastOfNumbers);

        Integer minValue = function.apply(numbers);

        System.out.println(minValue);
    }
}
----------------------------------------------------------------------------------------------
package _005_FunctionalProgramming._02_Exercise;

import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.function.Predicate;

public class _06_PredicateForNames {
    public static void main(String[] args) {
        Scanner scanner = new Scanner (System.in);

        int requiredLength = Integer.parseInt(scanner.nextLine());

        List<String> names = Arrays.stream(scanner.nextLine().split("\\s+")).toList();

        Predicate<String> predicate = name -> name.length() <= requiredLength;

        names.stream().filter(predicate).forEach(name -> System.out.println(name));
    }
}
-------------------------------------------------------------------------------------------------
package _005_FunctionalProgramming._02_Exercise;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.function.Function;

public class _07_FindTheSmallestElement {
    public static void main(String[] args) {
        Scanner scanner = new Scanner (System.in);

        List<Integer> numbers = Arrays.stream(scanner.nextLine().split("\\s+")).map(Integer::parseInt).toList();

        Function<List<Integer>, Integer> function = lastOfNumbers -> Collections.min(lastOfNumbers);

        Integer minValue = function.apply(numbers);

        System.out.println(numbers.indexOf(minValue)); // получаваме първата поява на този елемент
        System.out.println(numbers.lastIndexOf(minValue)); // получаваме последната поява на този елемент
    }
}
----------------------------------------------------------------------------------------------------------------------------

package _005_FunctionalProgramming._02_Exercise;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class _09_ListOfPredicates {
    public static void main(String[] args) {
        Scanner scanner = new Scanner (System.in);


        int n = Integer.parseInt(scanner.nextLine());

        List<Integer> divisors = Arrays.stream(scanner.nextLine().split("\\s+")).map(Integer::parseInt).collect(Collectors.toList());

        List<Predicate<Integer>> predicates = new ArrayList<>();

        for (Integer divisor: divisors) {
             Predicate<Integer> predicate = num -> num % divisor == 0;
             predicates.add(predicate);
        }

        for (int number = 1; number <= n ; number++) {
             boolean isDivisibleInAllPredicates = true;

            for (Predicate<Integer> predicate: predicates) {
                if (!predicate.test(number)) {
                    isDivisibleInAllPredicates = false;
                }
            }
            if (isDivisibleInAllPredicates) {
                System.out.print(number + " ");
            }
        }
    }
}
-----------------------------------------------------------------------------------------------------------------------------